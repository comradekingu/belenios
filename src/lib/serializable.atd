(**************************************************************************)
(*                                BELENIOS                                *)
(*                                                                        *)
(*  Copyright Â© 2012-2018 Inria                                           *)
(*                                                                        *)
(*  This program is free software: you can redistribute it and/or modify  *)
(*  it under the terms of the GNU Affero General Public License as        *)
(*  published by the Free Software Foundation, either version 3 of the    *)
(*  License, or (at your option) any later version, with the additional   *)
(*  exemption that compiling, linking, and/or using OpenSSL is allowed.   *)
(*                                                                        *)
(*  This program is distributed in the hope that it will be useful, but   *)
(*  WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *)
(*  Affero General Public License for more details.                       *)
(*                                                                        *)
(*  You should have received a copy of the GNU Affero General Public      *)
(*  License along with this program.  If not, see                         *)
(*  <http://www.gnu.org/licenses/>.                                       *)
(**************************************************************************)

<doc text="Serializable datatypes">

(** {2 Predefined types} *)

type json <ocaml module="Yojson.Safe"> = abstract
type number <ocaml predef from="Serializable_builtin"> = abstract
type uuid <ocaml predef from="Serializable_builtin"> = abstract
type 'a shape <ocaml predef from="Serializable_builtin"> = abstract
type 'a ciphertext <ocaml predef from="Serializable_core"> = abstract
type proof <ocaml predef from="Serializable_core"> = abstract
type question <ocaml module="Question"> = abstract

(** {2 Basic cryptographic datastructures} *)

type 'a group_element = 'a

(** {2 Trustees} *)

type 'a trustee_public_key = {
  pok : proof;
  public_key : 'a;
} <ocaml field_prefix="trustee_">

(** {2 Elections} *)

type ff_embedding = {
  padding : int;
  bits_per_int : int;
}

type ff_params = {
  g : number;
  p : number;
  q : number;
  ?embedding : ff_embedding option;
}
<doc text="Parameters for a multiplicative subgroup of a finite field.">

type ('a, 'b) wrapped_pubkey = {
  group : 'a;
  y : 'b;
} <ocaml field_prefix="wpk_">
<doc text="A public key wrapped with its group parameters.">

type 'a params = {
  description : string;
  name : string;
  public_key : 'a;
  questions : question list <ocaml repr="array">;
  uuid : uuid;
} <ocaml field_prefix="e_">
<doc text="Election parameters relevant for creating a ballot.">

type template = {
  description : string;
  name : string;
  questions : question list <ocaml repr="array">;
} <ocaml field_prefix="t_">
<doc text="Election template.">

(* FIXME: merge this with trustee_public_key *)
type 'a signature = {
  public_key : 'a;
  challenge : number;
  response : number;
} <ocaml field_prefix="s_">

type 'a ballot = {
  answers : json list <ocaml repr="array">;
  election_hash : string;
  election_uuid : uuid;
  ?signature : 'a signature option;
}

type 'a partial_decryption = {
  decryption_factors : 'a shape;
  decryption_proofs : proof shape;
}

type plaintext = int list <ocaml repr="array"> list <ocaml repr="array">

type 'a encrypted_tally = 'a ciphertext shape

type 'a election_result = {
  num_tallied : int;
  encrypted_tally : 'a encrypted_tally;
  partial_decryptions : 'a partial_decryption list;
  result : int shape;
}

(** {2 PKI support} *)

type signed_msg = {
  message : string;
  signature : proof;
} <ocaml field_prefix="s_">

type 'a channel_msg = {
  recipient : 'a;
  message : string;
} <ocaml field_prefix="c_">

type 'a encrypted_msg = {
  alpha : 'a;
  beta : 'a;
  data : string;
} <ocaml field_prefix="y_">

(** {2 Threshold decryption support} *)

type 'a cert_keys = {
  verification : 'a;
  encryption : 'a;
} <ocaml field_prefix="cert_">

type cert = signed_msg (* cert_keys *)

type certs = {
  certs : cert list <ocaml repr="array">;
}

type raw_polynomial = {
  polynomial : number list <ocaml repr="array">
}

type 'a raw_coefexps = {
  coefexps : 'a list <ocaml repr="array">
}

type coefexps = signed_msg (* raw_coefexps *)

type secret = {
  secret : number;
}

type polynomial = {
  polynomial : string; (* sent raw_polynomial *)
  secrets : string list <ocaml repr="array">; (* sent secrets *)
  coefexps : coefexps;
} <ocaml field_prefix="p_">

type vinput = {
  polynomial : string; (* sent raw_polynomial *)
  secrets : string list <ocaml repr="array">; (* sent secrets *)
  coefexps : coefexps list <ocaml repr="array">;
} <ocaml field_prefix="vi_">

type partial_decryption_key = {
  decryption_key : number;
} <ocaml field_prefix="pdk_">

type 'a voutput = {
  private_key : string; (* sent partial_decryption_key *)
  public_key : 'a trustee_public_key;
} <ocaml field_prefix="vo_">

type 'a threshold_parameters = {
  threshold : int;
  certs : cert list <ocaml repr="array">;
  coefexps : coefexps list <ocaml repr="array">;
  verification_keys : 'a trustee_public_key list <ocaml repr="array">;
} <ocaml field_prefix="t_">
