(**************************************************************************)
(*                                BELENIOS                                *)
(*                                                                        *)
(*  Copyright Â© 2012-2018 Inria                                           *)
(*                                                                        *)
(*  This program is free software: you can redistribute it and/or modify  *)
(*  it under the terms of the GNU Affero General Public License as        *)
(*  published by the Free Software Foundation, either version 3 of the    *)
(*  License, or (at your option) any later version, with the additional   *)
(*  exemption that compiling, linking, and/or using OpenSSL is allowed.   *)
(*                                                                        *)
(*  This program is distributed in the hope that it will be useful, but   *)
(*  WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *)
(*  Affero General Public License for more details.                       *)
(*                                                                        *)
(*  You should have received a copy of the GNU Affero General Public      *)
(*  License along with this program.  If not, see                         *)
(*  <http://www.gnu.org/licenses/>.                                       *)
(**************************************************************************)

open Eliom_service
open Eliom_service.Http
open Eliom_parameter
open Web_common

let home = service ~path:[""] ~get_params:unit ()
let admin = service ~path:["admin"] ~get_params:unit ()
let admin_gdpr_accept = post_coservice ~csrf_safe:true ~fallback:admin ~post_params:unit ()
let site_login = service ~path:["login"] ~get_params:(opt (string "service")) ()
let logout = service ~path:["logout"] ~get_params:unit ()

let source_code = service ~path:["belenios.tar.gz"] ~get_params:unit ()

let tool = preapply (static_dir ()) ["static"; "belenios-tool.html"]

let election_draft_new = post_coservice ~csrf_safe:true ~fallback:admin ~post_params:(radio string "credmgmt" ** radio string "auth" ** string "cas_server") ()
let election_draft_pre = service ~path:["draft"; "new"] ~get_params:unit ()
let election_draft = service ~path:["draft"; "election"] ~get_params:(uuid "uuid") ()
let election_draft_questions = service ~path:["draft"; "questions"] ~get_params:(uuid "uuid") ()
let election_draft_questions_post = post_coservice ~fallback:election_draft_questions ~post_params:(string "questions") ()
let election_draft_description = post_coservice ~fallback:election_draft ~post_params:(string "name" ** string "description") ()
let election_draft_languages = post_coservice ~fallback:election_draft ~post_params:(string "languages") ()
let election_draft_contact = post_coservice ~fallback:election_draft ~post_params:(string "contact") ()
let election_draft_voters = service ~path:["draft"; "voters"] ~get_params:(uuid "uuid") ()
let election_draft_voters_add = post_service ~fallback:election_draft_voters ~post_params:(string "voters") ()
let election_draft_voters_remove = post_coservice ~fallback:election_draft_voters ~post_params:(string "voter") ()
let election_draft_voters_passwd = post_coservice ~fallback:election_draft_voters ~post_params:(string "voter") ()
let election_draft_trustee_add = post_coservice ~fallback:election_draft ~post_params:(string "id") ()
let election_draft_trustee_add_server = post_coservice ~fallback:election_draft ~post_params:unit ()
let election_draft_trustee_del = post_coservice ~fallback:election_draft ~post_params:(int "index") ()
let election_draft_credential_authority = service ~path:["draft"; "credential-authority"] ~get_params:(uuid "uuid") ()
let election_draft_credentials = service ~path:["draft"; "credentials"] ~get_params:(string "token") ()
let election_draft_credentials_post = post_service ~fallback:election_draft_credentials ~post_params:(string "public_creds") ()
let election_draft_credentials_post_file = post_service ~fallback:election_draft_credentials ~post_params:(file "public_creds") ()
let election_draft_credentials_server = post_coservice ~fallback:election_draft ~post_params:unit ()

let election_draft_trustees = service ~path:["draft"; "trustees"] ~get_params:(uuid "uuid") ()
let election_draft_trustee = service ~path:["draft"; "trustee"] ~get_params:(string "token") ()
let election_draft_trustee_post = post_coservice ~fallback:election_draft_trustee ~post_params:(string "public_key") ()

let election_draft_threshold_trustees = service ~path:["draft"; "threshold-trustees"] ~get_params:(uuid "uuid") ()
let election_draft_threshold_trustee = service ~path:["draft"; "threshold-trustee"] ~get_params:(string "token") ()
let election_draft_threshold_trustee_post = post_coservice ~fallback:election_draft_threshold_trustee ~post_params:(string "data") ()
let election_draft_threshold_set = post_coservice ~fallback:election_draft_threshold_trustees ~post_params:(int "threshold") ()
let election_draft_threshold_trustee_add = post_coservice ~fallback:election_draft_threshold_trustees ~post_params:(string "id") ()
let election_draft_threshold_trustee_del = post_coservice ~fallback:election_draft_threshold_trustees ~post_params:(int "index") ()

let election_draft_confirm = service ~path:["draft"; "confirm"] ~get_params:(uuid "uuid") ()
let election_draft_create = post_coservice ~csrf_safe:true ~fallback:election_draft ~post_params:unit ()
let election_draft_destroy = post_coservice ~csrf_safe:true ~fallback:election_draft ~post_params:unit ()
let election_draft_auth_genpwd = post_coservice ~fallback:election_draft ~post_params:unit ()

let election_draft_import = service ~path:["draft"; "import"] ~get_params:(uuid "uuid") ()
let election_draft_import_post = post_coservice ~fallback:election_draft_import ~post_params:(uuid "from") ()
let election_draft_import_trustees = service ~path:["draft"; "import-trustees"] ~get_params:(uuid "uuid") ()
let election_draft_import_trustees_post = post_coservice ~fallback:election_draft_import_trustees ~post_params:(uuid "from") ()

let election_home = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "")) ()
let set_cookie_disclaimer = coservice' ~get_params:unit ()
let election_admin = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "admin")) ()
let election_regenpwd = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "regenpwd")) ()
let election_regenpwd_post = post_coservice ~fallback:election_regenpwd ~post_params:(string "user") ()
let election_login = service ~path:["elections"] ~get_params:(suffix_prod (uuid "uuid" ** suffix_const "login") (opt (string "service"))) ()
let election_open = post_coservice ~fallback:election_admin ~post_params:unit ()
let election_close = post_coservice ~fallback:election_admin ~post_params:unit ()
let election_archive = post_coservice ~fallback:election_admin ~post_params:unit ()
let election_delete = post_coservice ~fallback:election_admin ~post_params:unit ()
let election_update_credential = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "update-cred")) ()
let election_update_credential_post = post_service ~fallback:election_update_credential ~post_params:(string "old_credential" ** string "new_credential") ()
let election_vote = service ~path:["vote.html"] ~get_params:unit ()
let election_cast = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "cast")) ()
let election_cast_post = post_service ~fallback:election_cast ~post_params:(opt (string "encrypted_vote") ** opt (file "encrypted_vote_file")) ()
let election_cast_confirm = post_coservice ~csrf_safe:true ~fallback:election_cast ~post_params:unit ()
let election_pretty_ballots = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "ballots")) ()
let election_pretty_ballot = service ~path:["elections"] ~get_params:(suffix_prod (uuid "uuid" ** suffix_const "ballot") (string "hash")) ()
let election_pretty_records = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "pretty-records")) ()

let election_missing_voters = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "missing")) ()

let election_compute_encrypted_tally = post_coservice ~csrf_safe:true ~fallback:election_admin ~post_params:unit ()
let election_tally_trustees = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** suffix_const "trustees" ** string "token")) ()
let election_tally_trustees_post = post_service ~fallback:election_tally_trustees ~post_params:(string "partial_decryption") ()
let election_tally_release = post_service ~fallback:election_admin ~post_params:unit ()

let election_dir = service ~path:["elections"] ~get_params:(suffix (uuid "uuid" ** election_file "file")) ()

let dummy_post = post_coservice' ~post_params:(string "username") ()
let password_post = post_coservice' ~post_params:(string "username" ** string "password") ()

let set_language = coservice' ~get_params:(string "lang") ()
